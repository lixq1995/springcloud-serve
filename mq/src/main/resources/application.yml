server:
  port: 8085


spring:
  application:
    name: spring-cloud-consul-mq
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
         ##注册到consul的服务名称
        service-name: service-mq

  datasource:
      url: jdbc:mysql://localhost:3306/springcloud_serve?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true
      username: root
      password: root
      driver-class-name: com.mysql.cj.jdbc.Driver

  ##kafka
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        group:
          id: defaultConsumerGroup
        request:
          timeout:
            ms: 180000
        session:
          timeout:
            ms: 120000
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      retries: 0
      value-serializer: org.apache.kafka.common.serialization.StringSerializer






#  kafka:
#      bootstrap-servers: localhost:9092
#      consumer:
#        auto:
#          commit:
#            interval:
#              ms: 1000
#        auto-offset-reset: latest
#        enable-auto-commit: true
#        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#        properties:
#          group:
#            id: defaultConsumerGroup
#          request:
#            timeout:
#              ms: 180000
#          session:
#            timeout:
#              ms: 120000
#        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      listener:
#        missing-topics-fatal: false
#      producer:
#        acks: 1
#        batch-size: 16384
#        buffer-memory: 33554432
#        key-serializer: org.apache.kafka.common.serialization.StringSerializer
#        properties:
#          linger:
#            ms: 0
#          partitioner:
#            class: com.felix.kafka.producer.CustomizePartitioner
#        retries: 0
#        value-serializer: org.apache.kafka.common.serialization.StringSerializer

messenger:
  kafka:
    topicName: topicTest123





#
#  kafka:
#      bootstrap-servers: 127.0.0.1:9092,127.0.0.2:9092,127.0.0.3:9092
#
#      producer:
#        retries: 0
#        batch-size: 16384
#        buffer-memory: 33554432
#        key-serializer: org.apache.kafka.common.serialization.StringSerializer
#        value-serializer: org.apache.kafka.common.serialization.StringSerializer
#        properties:
#          linger.ms: 1
#
#      consumer:
#        enable-auto-commit: false
#        auto-commit-interval: 100ms
#        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#        properties:
#          session.timeout.ms: 15000
#
#  kafka:
#    topic:
#      group-id: topicGroupId
#      topic-name:
#        - topicTest123
#        - topicTest
#        - topic

rocketmq:
  ###consumer
  consumer:
    #设置一次消费消息的条数，默认为1条
    consumeMessageBatchMaxSize: 1
    consumeThreadMax: 64
    consumeThreadMin: 20
    groupName: ${spring.application.name}
    ##该应用是否启用消费者
    isOnOff: on
    #mq的nameserver地址
    namesrvAddr: 127.0.0.1:9876
    #该消费者订阅的主题和tags("*"号表示订阅该主题下所有的tags),格式：topic~tag1||tag2||tag3;topic2~*;
    topics: DemoTopic~*;
  ###producer
  producer:
    #发送同一类消息的设置为同一个group，保证唯一,默认不需要设置，rocketmq会使用ip@pid(pid代表jvm名字)作为唯一标示
    groupName: ${spring.application.name}
    #该应用是否启用生产者
    isOnOff: on
    #消息最大长度 默认1024*4(4M)
    maxMessageSize: 4096
    #mq的nameserver地址
    namesrvAddr: 127.0.0.1:9876
    #发送消息失败重试次数，默认2
    retryTimesWhenSendFailed: 2
    #发送消息超时时间,默认3000
    sendMsgTimeout: 3000





